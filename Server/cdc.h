#ifndef CDC_H
#define CDC_H


#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>


//Macro definitions for rabin fingerprint CDC
#define WIN_SIZE 16    // Window size for hashing
#define PRIME 3      // Prime number for hash calculation
#define MODULUS 512  // Modulus for chunk split condition
#define TARGET1 47    // Target hash value for chunk splitting
#define TARGET2 67    // Target hash value for chunk splitting
//Macro Definitions for Gear Based CDC(FastCDC)
#define FASTCDC_MIN_CHUNK 8
#define FASTCDC_AVG_CHUNK 128
#define FASTCDC_MAX_CHUNK 2048
#define FASTCDC_MASK_S 0x00007FFF;  //15 1
#define FASTCDC_MASK_L 0x00001FFF;  //13 1


const uint64_t gear_table[256] = {
    0x4CCA0454D70CC719ULL,
    0xB68D8C5F5A57C3A4ULL,
    0xCE83557D5C4C64D0ULL,
    0x7B0990B8CA60AD6FULL,
    0xB5B9E927F8642217ULL,
    0x08EB7D084368D729ULL,
    0xBE540C9D5BC1F2FAULL,
    0x7C089D4F1CC155F6ULL,
    0x29A435F1F4F5803BULL,
    0xBD88230A273C846EULL,
    0xB0E91AB167EB9F68ULL,
    0xE101D5C163E40E3CULL,
    0x13E3F90E169533C3ULL,
    0x6CBCFE6095A026CAULL,
    0xAABF6A65DFE0F298ULL,
    0x4D0804E58D195BA1ULL,
    0x1091E20ECA8E5CDBULL,
    0x36A62AE57D0A37C3ULL,
    0x90A1C6335FB2720CULL,
    0xC89DAF7B99D8D427ULL,
    0x757F6F9C223EF627ULL,
    0xF69E54FB0DE54D86ULL,
    0xFC0AAE602F6B2698ULL,
    0x3B5428A84CE14640ULL,
    0x89DF7F7DD0ED507FULL,
    0x0DE72CA819387CD1ULL,
    0xDABA11699B16ECC4ULL,
    0x66204EEA11B1F806ULL,
    0xD4CE1AEA2CB5EB10ULL,
    0xEE658B21A1BA904FULL,
    0x2DA9982EFE088DA2ULL,
    0xBCB5571A86EB2DCFULL,
    0xA2236E48722CC0BAULL,
    0x2220CC9ED6BE5668ULL,
    0xDB8B22D445FDC3AFULL,
    0x68D612AB5A242627ULL,
    0x173A081CCEA2D2D8ULL,
    0x3838D4E3AA7A6BC9ULL,
    0x4E1DC0AB054387B9ULL,
    0x43DF62C72953D2D8ULL,
    0x0D4637A3C18F2C16ULL,
    0x53BD2BB8A4B06C34ULL,
    0x3FE4F17B9D87C1EBULL,
    0x1C74E8F874C584BCULL,
    0x84008A24C0CF3346ULL,
    0xA509F0A6E7640FEAULL,
    0x517F2B47045F126BULL,
    0x1EDDC753DD572B05ULL,
    0x0964EE7182B9983EULL,
    0x611B6E19C812D4C3ULL,
    0x4ECD3BD6BF94F177ULL,
    0x7040D857136BCDFFULL,
    0x35BE398BBA1CA7CAULL,
    0xD7C9FC922149AAD5ULL,
    0xC171579D11AAC1EDULL,
    0x44299575F7061B24ULL,
    0x3FFE054C215C7D26ULL,
    0xE231570A7F608848ULL,
    0x4195C2D0E2E23414ULL,
    0xDFB74FABDC261AE7ULL,
    0x1ED6D03740CE802BULL,
    0xEE109EF171DC92D2ULL,
    0x5764035BC95B6E78ULL,
    0xADC7D4874000AA90ULL,
    0x982DE201B647DAD0ULL,
    0x913C772C64C5E01BULL,
    0x8A25DB59EE67ADC7ULL,
    0x9D405EB35E1C0DDEULL,
    0x93A11D9E7E71D37BULL,
    0x7BBD1FC531069C95ULL,
    0x80A07A2FD1F8E729ULL,
    0xA55340BFCC111F3EULL,
    0x5AE863D946AC4C12ULL,
    0xB5D7E2370AF9C478ULL,
    0x31FF44F4A0C92F21ULL,
    0x8B006F4B9CB8E0A2ULL,
    0xFB26F9D2BEDD7560ULL,
    0xE28DA6AB5D578EA2ULL,
    0xA22BBB979B794562ULL,
    0x168403E9C69ABA3CULL,
    0x7ED81ADCFC9BECC5ULL,
    0x13A2B33CF7A153BFULL,
    0x626616678618A3DFULL,
    0x77EA4B93B3C580B5ULL,
    0x8ABDC55D4DE5A874ULL,
    0x08A40236B74F598CULL,
    0xD2AD086C286EDE42ULL,
    0xA6E2647C3CC2B376ULL,
    0xF7768EE19C529F58ULL,
    0xCBCB1A52F73E4965ULL,
    0xECFC59005429B9A9ULL,
    0xA7B0540726884B53ULL,
    0xB418D1AECA1EC494ULL,
    0xB4860EF36C2B385AULL,
    0x63844762F7A978EEULL,
    0x8F3C0F5C457A2775ULL,
    0x5F70AD4C40CE7180ULL,
    0xB382819AEB53B203ULL,
    0xC5866F24E4FAFB1AULL,
    0xB0708AB4A65A07EAULL,
    0xE98A6ADBEE23E1D6ULL,
    0x9B64566A6270BF70ULL,
    0x64C5D8B2360EC416ULL,
    0x1701FCD8C9DDD202ULL,
    0x0DC6E8319EAE7F33ULL,
    0x8CF64A0D4569F8F1ULL,
    0x61D485455B62689BULL,
    0x5A6B302AB04A3FA4ULL,
    0x9B288DDBC8071B9FULL,
    0x6105A5E13028BCF4ULL,
    0x6C56FD49CD6A6F8BULL,
    0x3620300F14A0F191ULL,
    0x8916816364DDD984ULL,
    0xABFC6E8A6E6C7F8BULL,
    0x9F651D095D31F727ULL,
    0x7EB7C380F1871E7FULL,
    0xF340C78FBB3574BAULL,
    0xD90DBE499654F4D8ULL,
    0x7816A41DF5B4A2BBULL,
    0x73F71C5518318E61ULL,
    0xBE08B2CB3472023EULL,
    0x5EA9A9991BEE5DB9ULL,
    0x5E636F4AE27A189AULL,
    0xEDA6B31D515B3384ULL,
    0x99C2AD30BA076551ULL,
    0xD5DDEFA9B3FAFC44ULL,
    0x0BB646858707E68CULL,
    0x3E11D1EFCA73F76AULL,
    0xE57978C342173775ULL,
    0x28D849C0837ACE28ULL,
    0x5EA22A939EBFB2E5ULL,
    0x1716DDFE54114F22ULL,
    0xF81BDAE254D6335AULL,
    0x29FE2FDF6EBC324EULL,
    0x1C9BE67584EA1791ULL,
    0xF0201B25E32C0AEBULL,
    0xC227619E88797B24ULL,
    0xDCC735F5ABCC0DD9ULL,
    0x714908A4A18C6C63ULL,
    0xA775062EA2D2BBB5ULL,
    0x3988B878C512CF3AULL,
    0x040B9D1A7CC015CFULL,
    0xF1ECAB5358D2801AULL,
    0xFD712ED35719B1CDULL,
    0xCBBAFB725C3D8FBBULL,
    0xECB290F20421E245ULL,
    0x7B7A4E9C6A3B232CULL,
    0xBEDB8E383F54AE11ULL,
    0x896130EB442861D0ULL,
    0x6009BE9705BF47C5ULL,
    0x649816569BD7930AULL,
    0x9F8F84B9A13D7ED7ULL,
    0x01778EFEE8C052CEULL,
    0xF19747A3F957A4E7ULL,
    0xB6389C2B6C4FE624ULL,
    0x4F87B12A13681DEEULL,
    0x8FEF151B1AE8FCC3ULL,
    0xA50AC5C909FD0E5BULL,
    0x890582574B1392E2ULL,
    0x69688CB015727B89ULL,
    0x05116D5FE0F06491ULL,
    0x4ED062A1F70D8FD1ULL,
    0x1F787FBA836F1110ULL,
    0x66B921BCDC05BA50ULL,
    0x6B02A29044729E43ULL,
    0xBD2C8CD34F8E9751ULL,
    0x4A66F4F5214CA40DULL,
    0x95B079431069AE9EULL,
    0xF31DFE8D778D3D1FULL,
    0x2B19316DD1595AB9ULL,
    0xB760C6B33C3449C1ULL,
    0x4DB7EF3F56544A2EULL,
    0xA49F8437C4DD054FULL,
    0x4F055E1A63C7BC27ULL,
    0x3D05634157889E04ULL,
    0x767846E37D84C34DULL,
    0xD6DE38ED6DAF50FFULL,
    0xBDDC551F398B6B91ULL,
    0x2BAD0CE636081CBCULL,
    0xF82106A8A6BF0BB5ULL,
    0x285C684A88079085ULL,
    0x9A95282209DB43B5ULL,
    0xD916C5CA0B20245FULL,
    0x844027A3D59717DFULL,
    0x3A80FA3CE555E12FULL,
    0x3DDCE0FDD0EA107DULL,
    0x31C55F7A68C4B92DULL,
    0x8078DC58C6D99BA4ULL,
    0xEB481B5C80B835F9ULL,
    0x21C2A68E9CCA35D9ULL,
    0x6C112168C5FC16BAULL,
    0x5F6687F4C475FAE2ULL,
    0x39DDC5CCF61C4CE8ULL,
    0x09D7AFDE76ADC036ULL,
    0x62E3E6D915D09782ULL,
    0x8D7CDC29415BDF27ULL,
    0xD3D7010CC29C5A51ULL,
    0x0F4161B6E7FE9298ULL,
    0xC737AE530C334E82ULL,
    0xB7881A026F72054CULL,
    0x52FD29495B8CD169ULL,
    0x88B418BA6512BD66ULL,
    0xD1F9479D5F751077ULL,
    0x9F30AC57219CDEB5ULL,
    0xF7F2FA602408A83CULL,
    0x474A8B4B1B09FE1DULL,
    0x9F783CD2761A153FULL,
    0x13A18212B1EBCAF0ULL,
    0xB10885CAD2A4DEFBULL,
    0xDBEB98385D32E5DFULL,
    0x51808620B48C5A3BULL,
    0x89A841C4571877ADULL,
    0x77EBC511E007E4ABULL,
    0x7FEE5D14A48D8E63ULL,
    0xD007F211C69BB4F1ULL,
    0xE81F30F62FE21AF8ULL,
    0xBE10F5A81D2D4F35ULL,
    0xD3B5B4A7D6AA6030ULL,
    0xA53AA0DFA84E39F6ULL,
    0x0924AEC13451563BULL,
    0xBDB85B0A1F53B74FULL,
    0xA7531613371B004FULL,
    0x690485507C6DEBDCULL,
    0xAA206E409903054DULL,
    0xFB7A139046F54601ULL,
    0x5748C0BF3CCED356ULL,
    0x5F6E6AE666FA7457ULL,
    0xA4A084DA91B05FB5ULL,
    0x57964C7E81DB9E35ULL,
    0xA8B5E4AFBB356F59ULL,
    0x156540DF0C557A6EULL,
    0x9A0D780EF0D109FDULL,
    0xD1CE14A28838DB1EULL,
    0x37CFB09805163D99ULL,
    0x476E5EF042070039ULL,
    0x62B93E201CDBA50BULL,
    0x901A3D14F778CFF3ULL,
    0x3E86FE39DD2B3BC8ULL,
    0x03F95F38DB7806C3ULL,
    0xBF41CC1C793680DBULL,
    0xABC1AEBA7CA73361ULL,
    0x09826BBE233A882BULL,
    0x2534795EBCB75494ULL,
    0x036819EEC6AAB379ULL,
    0x15F511BC71FC505CULL,
    0x56B37BFA9F252697ULL,
    0x67AAFB00D91DD2C2ULL,
    0xBAF2FFBEAF92D928ULL,
    0x50559ECB0B802C03ULL,
    0x44AA16D4ED587FACULL,
    0x5658D9A6D81DC9C6ULL,
    0x965167C90DB364D0ULL,
    0x5399D3E58D8FD8B5ULL,
    0xBDCB7DE7CC97E5E7ULL,
    0xAE81B1D163B90FEDULL,
    0xD1DFA5C60F992140ULL
};



uint64_t initial_hash_func(const unsigned char *input, unsigned int pos);
uint64_t rolling_hash(uint64_t previous_hash, unsigned char old_char, unsigned char new_char);
void rabin_fingerprint_cdc(const unsigned char *buff, unsigned int buff_size, unsigned char ***chunks, unsigned int *chunk_count, int **chunk_sizes);
inline uint64_t gear_rolling_hash(uint64_t h, uint8_t c);
void gear_based_fastcdc(const unsigned char *buff, unsigned int buff_size, unsigned char ***chunks, unsigned int *chunk_count, int **chunk_sizes);

#endif